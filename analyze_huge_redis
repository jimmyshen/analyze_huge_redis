#!/usr/bin/env python

"""
A Redis analysis tool for huge redis databases.

Copyright (c) 2014 Jimmy Shen
"""

__author__ = 'Jimmy Shen'


import re
import sys
import argparse
import json
import operator
from itertools import imap
from collections import defaultdict
from urlparse import urlparse

from redis import Redis


def redis_from_url(url):
    url = urlparse(url)

    if url.scheme != 'redis':
        return None

    db = 0
    match = re.match('^/(\d+)$', url.path)
    if match:
        db = int(match.group(1))

    hostname = url.hostname or 'localhost'
    password = url.password or None
    port = url.port or 6379

    return Redis(host=hostname, port=port, password=password, db=db)


class Analyzer(object):
    class BufferedAccounter(object):
        def __init__(self, redis, maxlen=50):
            self.redis = redis
            self.maxlen = maxlen
            self.keys = []
            self.use_debug_object = False

        def is_empty(self):
            return not self.keys

        def ready_to_flush(self):
            return len(self.keys) >= self.maxlen

        def add_key(self, key):
            self.keys.append(key)

        def flush(self):
            result = []

            with self.redis.pipeline(transaction=False) as pipe:
                cmd = pipe.debug_object if self.use_debug_object else pipe.dump

                for key in self.keys:
                    cmd(key)

                values = pipe.execute()

            if self.use_debug_object:
                values = imap(operator.itemgetter('serializedlen'), values)
            else:
                values = imap(len, values)

            result = zip(self.keys, values)

            self.keys[:] = []

            return result

    def __init__(self, redis):
        self.redis = redis
        self.scan_limit = None
        self.heartbeat = None
        self.reset()

    def reset(self):
        self.key_matcher = self.default_matcher
        self.key_scanner = self.create_scanner()
        self.key_accounter = None
        self.key_freq = defaultdict(int)
        self.key_bytes = defaultdict(int)
        self.total_scanned = 0
        self.total_bytes = 0

    def set_match_rules(self, rules):
        self.key_matcher = self.create_regexp_matcher(rules)

    def use_scan(self):
        self.key_scanner = self.create_scanner()

    def use_randomkey(self):
        self.key_scanner = self.create_randomscanner()

    def enable_key_accounting(self, use_debug_object=False):
        self.key_accounter = self.BufferedAccounter(self.redis)
        self.key_accounter.use_debug_object = use_debug_object

    def disable_key_accounting(self):
        self.key_accounter = None

    def analyze(self):
        for key in self.key_scanner:
            bucket = self.key_matcher(key)
            self.key_freq[bucket] += 1
            self.total_scanned += 1

            if self.key_accounter:
                self.key_accounter.add_key(key)

                if self.key_accounter.ready_to_flush():
                    for key, bytes_used in self.key_accounter.flush():
                        self.key_bytes[bucket] += bytes_used
                        self.total_bytes += bytes_used

            if self.heartbeat and self.total_scanned > 0 and (self.total_scanned % self.heartbeat) == 0:
                print self.total_scanned, 'keys scanned'

            if self.scan_limit and self.total_scanned >= self.scan_limit:
                break

        if self.key_accounter and not self.key_accounter.is_empty():
            for key, bytes_used in self.key_accounter.flush():
                self.key_bytes[bucket] += bytes_used
                self.total_bytes += bytes_used

    def summarize(self):
        biggest_key = max(map(len, self.key_freq.keys())) + 1

        print
        print 'Summary'
        print '-------'

        if self.key_accounter:
            fmt = '%-{}s: %d (%.1f%%) [used=%.1fkb (%.1f%%)]'.format(biggest_key)

            for key, count in sorted(self.key_freq.items(), reverse=True, key=operator.itemgetter(1)):
                bytes_used = self.key_bytes[key]
                print fmt % (key,
                             count,
                             count / float(self.total_scanned) * 100,
                             bytes_used / 1024.0,
                             bytes_used / float(self.total_bytes) * 100)
        else:
            fmt = '%-{}s: %d (%.1f%%)'.format(biggest_key)

            for key, count in sorted(self.key_freq.items(), reverse=True, key=operator.itemgetter(1)):
                print fmt % (key, count, count / float(self.total_scanned) * 100)

    def create_scanner(self):
        return self.redis.scan_iter(count=1000)

    def create_randomscanner(self):
        def scanner():
            while True:
                yield self.redis.randomkey()

        return scanner()

    @staticmethod
    def get_obj_size_using_dump(redis, key):
        return len(redis.dump(key)) or 0

    @staticmethod
    def get_obj_size_using_debug_object(redis, key):
        value = redis.debug_object(key)
        return int(value['serializedlength']) if value else 0

    @staticmethod
    def default_matcher(value):
        return value

    @staticmethod
    def create_regexp_matcher(rules):
        def matcher(value):
            for pattern, label in rules:
                if pattern.search(value):
                    return label
            return value

        return matcher


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Analyzes keyspace of huge Redis databases')
    parser.add_argument('redis_url', type=str, help='Redis URL')
    parser.add_argument('--mode', type=str, default='scan', choices=(['scan', 'random']), help='Choose key scan method (default: scan)')
    parser.add_argument('--rules', type=file, help='Rules JSON file')
    parser.add_argument('--limit', type=int, help='Limit number of keys to scan')
    parser.add_argument('--account', action='store_true', help='Account # of bytes used')
    parser.add_argument('--use_debug_object', action='store_true', help='Account for bytes using DEBUG OBJECT')
    parser.add_argument('--heartbeat', type=int, help='Print to stdout every...')

    args = parser.parse_args()

    redis = redis_from_url(args.redis_url)
    if not redis.ping():
        sys.exit('Could not reach Redis @ %s' % (args.redis_url,))

    analyzer = Analyzer(redis)
    analyzer.scan_limit = args.limit
    analyzer.heartbeat = args.heartbeat

    if args.rules:
        rules = []
        pattern_list = json.loads(args.rules.read())

        for pattern in pattern_list:
            rules.append((re.compile(pattern['pattern']), unicode(pattern['label'])))

        analyzer.set_match_rules(rules)
        args.rules.close()

    if args.mode == 'random':
        if not args.limit:
            sys.exit('Must provide limit if using randomkeys')

        analyzer.use_randomkey()

    if args.account:
        analyzer.enable_key_accounting(use_debug_object=args.use_debug_object)

    try:
        analyzer.analyze()
    except KeyboardInterrupt:
        print "Stopping analysis..."
    finally:
        analyzer.summarize()
